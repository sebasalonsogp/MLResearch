import torch
import torch.nn as nn
import torch.nn.functional as F
from torch import linalg as LA

class SmallNetA(nn.Module):
    def __init__(self, nclass=10, scale=1, channels=3, **kwargs):
        super(SmallNetA, self).__init__()
        #self.kwargs = kwargs
        self.in_planes = int(64 * scale)
        self.channels = channels
        

        #c x 32 x 32
        self.conv1 = nn.Conv2d(self.channels, int(16 * scale), kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(int(16*scale))
        self.pool1 = nn.AvgPool2d(2)
        #c x 16 x 16
        
        self.conv2 = nn.Conv2d(int(16*scale), int(32*scale), kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(int(32*scale))
        self.pool2 = nn.AvgPool2d(2)
        #c x 8 x 8

        self.conv3 = nn.Conv2d(int(32*scale), int(64*scale), kernel_size=3, stride=1, padding=1, bias=False)
        self.bn3 = nn.BatchNorm2d(int(64*scale))
        self.pool3 = nn.AvgPool2d(2)
        #c x 4 x 4

        self.linear = nn.Linear(int(64 * scale) , nclass)

        self.multi_out = 0
        self.proto_layer = kwargs['proto_layer']
        self.proto_pool = kwargs['proto_pool']
        self.proto_norm = kwargs['proto_norm']
        
        if self.proto_pool == "max":
            self.proto_pool_f = nn.AdaptiveMaxPool2d((1,1))
        elif self.proto_pool == "ave":
            self.proto_pool_f = nn.AdaptiveAvgPool2d((1,1))
            
    def define_proto(self,features):
        if self.proto_pool in ['max','ave']:
            features = self.proto_pool_f(features)

        #if self.proto_norm:
        #    return F.normalize(features.view(features.shape[0],-1))
        #else:
        #normalize in loss function
        return features.view(features.shape[0],-1)


    def forward(self, x):
        out = F.relu(self.pool1(self.bn1(self.conv1(x))))
        out = F.relu(self.pool2(self.bn2(self.conv2(x))))
        out = F.relu(self.pool3(self.bn3(self.conv3(x))))
        
        if self.proto_layer == 4:
            p = self.define_proto(out)

        if self.proto_pool == 'ave':
            out = F.avg_pool2d(out, 4)

        if self.proto_pool == 'max':
            out = F.max_pool2d(out, 4)
            
        out = out.view(out.size(0), -1)

        if self.proto_norm:
            out = F.normalize(out)
        
        out = self.linear(out)
        
        if (self.multi_out):
            return p, out
        else:
            return out



def SmallNet(nclass, scale, channels, **kwargs):
    
    return SmallNetA(nclass, scale, channels, **kwargs)
